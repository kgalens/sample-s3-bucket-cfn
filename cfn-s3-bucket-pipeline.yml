AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  PipelineName:
    Type: String
    Default: 'TestCICDPipeline'
  GitHubOwner:
    Type: String
    Default: kgalens
  RepositoryName:
    Type: String
    Default: sample-s3-bucket-cfn
  BranchName:
    Type: String
    Default: main
  StackName:
    Type: String
    Default: TestBucketDeployStack

  SourceDirectory:
    Type: String
    Default: workflows/service-workbench-example
  TemplateFileName:
    Type: String
    Default: example-notebook-service-catalog.yml
  TemplateStackConfig:
    Type: String
    Default: example-notebook-service-catalog.json
  ProductTemplateName:
    Type: String
    Default: example-sagemaker-notebook.yml

  CustomEnvironmentFilesBucketName:
    Type: String
    Default: 498785437796-dev-va-swb-environments-bootstrap-scripts
  CustomEnvironmentFilesPrefix:
    Type: String
    Default: environment-files/custom-environment-files
  PortfolioId:
    Type: String
    Default: port-nswqfxj5fmceq
  ConstraintRoleName:
    Type: String
    Default: dev-va-swb-LaunchConstraint


Resources:
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: SwbCICDBuildProject
      Description: Build Project for example CICD workflow for Service Workbench Deployment.
      ServiceRole: !GetAtt [BuildRole, Arn]
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: source_directory
            Type: PLAINTEXT
            Value: !Ref SourceDirectory
      LogsConfig:
        CloudWatchLogs:
          GroupName: 'swb-cicd-build-project-logs'
          StreamName: 'log-stream'
          Status: ENABLED
      Source:
        Type: CODEPIPELINE

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref 'ArtifactStoreBucket'
        Type: S3
      Name: !Join
        - '-'
        - - !Ref 'PipelineName'
          - !Ref 'AWS::StackName'
      RoleArn: !GetAtt [PipelineRole, Arn]
      Stages:
        - Name: GithubSource
          Actions:
            - Name: TemplateSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: '{{resolve:secretsmanager:MyGitHubSecret:SecretString:SecretString}}'
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: TemplateSource
              RunOrder: '1'
        - Name: Build
          Actions:
            - Name: CreateDeployArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: TemplateSource
              OutputArtifacts:
                - Name: BuiltTarget
              RunOrder: '2'
        - Name: CopyToS3
          Actions:
            - Name: DeployToS3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              InputArtifacts:
                - Name: BuiltTarget
              Configuration:
                BucketName: !Ref CustomEnvironmentFilesBucketName
                Extract: true
                ObjectKey: !Ref CustomEnvironmentFilesPrefix 
              RunOrder: '3'
        - Name: TestStage
          Actions:
            - Name: CreateStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: BuiltTarget
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                RoleArn: !GetAtt [CFNRole, Arn]
                StackName: !Sub "${StackName}-${AWS::StackName}"
                TemplateConfiguration: !Sub "BuiltTarget::${SourceDirectory}/${TemplateStackConfig}"
                TemplatePath: !Sub "BuiltTarget::${SourceDirectory}/${TemplateFileName}"
                ParameterOverrides: !Sub '{"ProductCloudFormationTemplate":"https://${CustomEnvironmentFilesBucketName}.s3.amazonaws.com/${CustomEnvironmentFilesPrefix}/${SourceDirectory}/${ProductTemplateName}","PortfolioId":"${PortfolioId}","ConstraintRoleName":"${ConstraintRoleName}"}'
              RunOrder: '4'

  CFNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CloudFormationRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 's3:*'
                Effect: Allow
                Resource: '*'
        - PolicyName: ServiceCatalog Permissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'servicecatalog:*'
                Effect: Allow
                Resource: '*'
        - PolicyName: iam Pass Role for launch constraint
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'iam:PassRole'
                Effect: Allow
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ConstraintRoleName}'

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codepipeline.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: StartCodeBuild
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'codebuild:*'
                Effect: Allow
                Resource: !GetAtt CodeBuildProject.Arn
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 's3:*'
                - 'cloudformation:CreateStack'
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:DeleteStack'
                - 'cloudformation:UpdateStack'
                - 'cloudformation:CreateChangeSet'
                - 'cloudformation:ExecuteChangeSet'
                - 'cloudformation:DeleteChangeSet'
                - 'cloudformation:DescribeChangeSet'
                - 'cloudformation:SetStackPolicy'
                - 'iam:PassRole'
                - 'sns:Publish'
                Effect: Allow
                Resource: '*'

  BuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 's3:*'
                - 'logs:*'
                - 'iam:PassRole'
                - 'sns:Publish'
                Effect: Allow
                Resource: '*'
